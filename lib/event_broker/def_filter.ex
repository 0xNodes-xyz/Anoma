defmodule EventBroker.DefFilter do
  @moduledoc """
  I contain the deffilter macro. Require or use me to use deffilter.
  """

  defmacro __using__(_opts) do
    quote do
      import EventBroker.DefFilter
    end
  end

  @doc """
  I am the deffilter macro, permitting inline succinct filter
  definitions.  I take a module name (which becomes a child of the
  current module, e.g.  deffilter Trivial inside EventBroker.Filters
  defines EventBroker.Filters.Trivial), and a do-block containing the
  body of the filter function.

  My optional parameters are event, a pattern which is used in the
  filter function head (defaulting to _), params, also a pattern,
  working similarly for the other argument of the filter function head,
  and fields, a list of field macros which goes inside the typedstruct
  defined for the filter module, defaulting to a fieldless struct.
  """

  defmacro deffilter(name, opts \\ [], do: filter_block) do
    v_opts =
      Keyword.validate!(opts,
        event:
          quote do
            _
          end,
        params:
          quote do
            _
          end,
        fields: {:__block__, [], []}
      )

    event = v_opts[:event]
    params = v_opts[:params]
    fields = v_opts[:fields]

    quote do
      defmodule unquote(name) do
        @moduledoc """
        I am the #{inspect(__MODULE__)} filter generated by deffilter.
        """
        use TypedStruct
        use EventBroker.Filter

        typedstruct enforce: true do
          @typedoc """
          I am the parameter type of the #{inspect(__MODULE__)} filter generated by deffilter.
          """
          unquote(fields)
        end

        @spec filter(EventBroker.Event.t(), t()) :: bool()
        def filter(unquote(event), unquote(params)) do
          unquote(filter_block)
        end
      end
    end
  end
end
